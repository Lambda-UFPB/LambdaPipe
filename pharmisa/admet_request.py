import requests
from concurrent.futures import ThreadPoolExecutor
import urllib3
import time
from tqdm import tqdm
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


protocol = "https"
url = f"https://admetlab3.scbdd.com/api/admet"
SSL = True


def check_ssl():
    """Check if the SSL certificate is valid"""
    global protocol
    global url
    global SSL
    try:
        requests.get(url, verify=True)
    except requests.exceptions.SSLError:
        protocol = "http"
        url = f"{protocol}://admetlab3.scbdd.com/api/admet"
        SSL = False
    url = f"{protocol}://admetlab3.scbdd.com/api/admet"


def get_smiles_sublist(best_molecules_dict: dict):
    smiles_tuple_list = [(key, mol_data['smiles']) for key, mol_data in best_molecules_dict.items()]
    if len(smiles_tuple_list) > 100:
        num_sublists = (len(smiles_tuple_list) + 99) // 100
        smiles_sublists = [smiles_tuple_list[i*100:(i+1)*100] for i in range(num_sublists)]
    else:
        smiles_sublists = [smiles_tuple_list]
    return smiles_sublists


def get_mol_list(smiles_sublist: list):
    """Get url for csv file generated by the admetlab portal for the smiles"""
    global url
    global SSL
    smiles_list = [smiles for key, smiles in smiles_sublist]
    ids_list = [key for key, smiles in smiles_sublist]
    payload = {
        "SMILES": smiles_list,
        "feature": False
    }
    r = requests.post(url, json=payload, verify=SSL)
    if r.status_code == 503:
        raise ConnectionError("Service Unavailable")
    else:
        response = r.json()
    mol_list = response['data']['data']
    for mol, key in zip(mol_list, ids_list):
        mol['id'] = key
    mol_list = [mol for mol in mol_list if 'Invalid Molecule' not in mol.values()]
    return mol_list


def run_admet_request(best_molecules_dict: dict):
    check_ssl()
    smiles_strings = get_smiles_sublist(best_molecules_dict)
    final_mol_list = []
    with ThreadPoolExecutor() as executor:
        for smiles_sublist in tqdm(smiles_strings, desc="Getting ADMET info", ncols=100):
            response = executor.submit(get_mol_list, smiles_sublist)
            final_mol_list.extend(response.result())
            time.sleep(1)
    return final_mol_list
