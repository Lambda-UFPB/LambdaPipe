import requests
from aiohttp import ClientSession, ClientTimeout
import asyncio
import timeit
import urllib3
import json
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


protocol = "https"
url = f"https://admetlab3.scbdd.com/api/admet"
SSL = True


def check_ssl():
    """Check if the SSL certificate is valid"""
    global protocol
    global url
    global SSL
    try:
        requests.get(url, verify=True)
    except requests.exceptions.SSLError:
        protocol = "http"
        url = f"{protocol}://admetlab3.scbdd.com/api/admet"
        SSL = False
    url = f"{protocol}://admetlab3.scbdd.com/api/admet"


def get_smiles_sublist(best_molecules_dict: dict):
    smiles_tuple_list = [(key, mol_data['smiles']) for key, mol_data in best_molecules_dict.items()]
    if len(smiles_tuple_list) > 10:
        num_sublists = (len(smiles_tuple_list) + 9) // 10
        smiles_sublists = [smiles_tuple_list[i*10:(i+1)*10] for i in range(num_sublists)]
    else:
        smiles_sublists = [smiles_tuple_list]
    return smiles_sublists


async def get_mol_list(session: ClientSession, smiles_sublist: list):
    """Get url for csv file generated by the admetlab portal for the smiles"""
    global url
    global SSL
    smiles_list = [smiles for key, smiles in smiles_sublist]
    ids_list = [key for key, smiles in smiles_sublist]
    payload = {
        "SMILES": smiles_list,
        "feature": False
    }
    async with session.post(url, json=payload) as r:
        response = await r.json()
    mol_list = response['data']['data']
    for mol, key in zip(mol_list, ids_list):
        mol['id'] = key
    mol_list = [mol for mol in mol_list if 'Invalid Molecule' not in mol.values()]
    return mol_list


async def run_admet_request(best_molecules_dict: dict):
    check_ssl()
    smiles_strings = get_smiles_sublist(best_molecules_dict)
    timeout = ClientTimeout(total=999999)
    async with ClientSession(timeout=timeout) as session:
        tasks = []
        for index, smiles_divided_group in enumerate(smiles_strings):
            task = asyncio.ensure_future(get_mol_list(session, smiles_divided_group))
            tasks.append(task)
        responses = await asyncio.gather(*tasks)
    final_mol_list = [mol for sublist in responses for mol in sublist]

    return final_mol_list
if __name__ == "__main__":
    output_folder = "/home/kdunorat/PycharmProjects/LambdaPipe/files/testedefinitivo"
    with open('/home/kdunorat/Projetos/LambdaPipe/lambdapipe/teste_new.json', 'r') as j:
        dict_final = json.load(j)
    start_time = timeit.default_timer()
    final_mol_list1 = asyncio.run(asyncio.wait_for(run_admet_request(dict_final), timeout=120000))
    end_time = timeit.default_timer()
    execution_time = end_time - start_time
    print(f"The function took {execution_time} seconds to complete")

